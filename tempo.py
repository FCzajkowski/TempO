import subprocess
import os
import shutil
import typer
from rich.console import Console
from rich.tree import Tree
from pathlib import Path
import markdown
from jinja2 import Template



name = '_'
python = """
def main() -> None:
    print("hello world!")

if __name__ == "__{name}__":
    main()
"""

html_template = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <meta name="author" content="{{ author }}">
    <meta name="description" content="{{ description }}">
    <meta name="keywords" content="{{ keywords }}">
    <link rel="stylesheet" href="static/style.css">
    <link rel="icon" href="">
</head>
<body>
    {{ content }}
    <script src="scripts/script.js"></script>
</body>
</html>
"""

console = Console()
app = typer.Typer()


def create_html_page(title: str, content: str, path: str):
    try:
        if path and not path.endswith("/"):
            path += "/"

        full_path = os.path.join(path, "index.html")
        os.makedirs(path, exist_ok=True)

        template = Template(html_template)
        html_content = template.render(
            title=title,
            author="ForU",
            description="",
            keywords="",
            content=content
        )

        with open(full_path, 'w') as file:
            file.write(html_content)

        typer.echo(f"‚úîÔ∏è Created HTML page at {full_path} ")
    except Exception as e:
        typer.echo(f"‚ùå Error while creating HTML page: {e} ")


@app.command(short_help="Creates a static site")
def create_site(title: str, content_path: str, output_path: str):
    try:
        if not os.path.isfile(content_path):
            typer.echo(f"‚ùå Content file {content_path} does not exist ")
            return

        with open(content_path, 'r') as file:
            content = markdown.markdown(file.read())

        create_html_page(title, content, output_path)

        # Create 'static' and 'scripts' directories
        static_dir = os.path.join(output_path, "static/")
        scripts_dir = os.path.join(output_path, "scripts/")
        os.makedirs(static_dir, exist_ok=True)
        os.makedirs(scripts_dir, exist_ok=True)

        # Create 'style.css' and 'script.js' files
        with open(os.path.join(static_dir, "style.css"), 'w') as file:
            file.write("""
:root{}

/* Insert your styles here */

@media (max-width:800px){}

            """)

        with open(os.path.join(scripts_dir, "script.js"), 'w') as file:
            file.write("// Insert your scripts here")

        typer.echo(f"‚úîÔ∏è Static site created at {output_path} ")
    except Exception as e:
        typer.echo(f"‚ùå Error while creating static site: {e} ")


@app.command(short_help="Serve the site locally")
def serve(path: str = "."):
    try:
        import http.server
        import socketserver

        PORT = 8000
        Handler = http.server.SimpleHTTPRequestHandler

        with socketserver.TCPServer(("", PORT), Handler) as httpd:
            typer.echo(f"üíª Serving at http://localhost:{PORT}")
            httpd.serve_forever()
    except Exception as e:
        typer.echo(f"‚ùå Error while serving site: {e}")


@app.command(short_help="Deploy the site to GitHub Pages")
def deploy(path: str, repo_url: str):
    try:
        # Ensure the path is valid
        if not os.path.isdir(path):
            typer.echo(f"‚ùå The path '{path}' is not a valid directory.")
            return

        # Change to the deployment directory
        os.chdir(path)

        # Initialize a new Git repository if one does not exist
        if not os.path.exists(".git"):
            subprocess.run(["git", "init"], check=True)

        # Add all files and commit
        subprocess.run(["git", "add", "-A"], check=True)
        subprocess.run(["git", "commit", "-m", "Deploy site to GitHub Pages"], check=True)

        # Set the remote repository URL
        subprocess.run(["git", "remote", "remove", "origin"], check=False)  # Remove existing remote if it exists
        subprocess.run(["git", "remote", "add", "origin", repo_url], check=True)

        # Push to gh-pages branch
        subprocess.run(["git", "push", "--force", "origin", "master:gh-pages"], check=True)

        typer.echo(f"‚úîÔ∏è Site deployed to GitHub Pages from {path} ‚úîÔ∏è")

    except subprocess.CalledProcessError as e:
        typer.echo(f"‚ùå Error while deploying site: {e}")
    except Exception as e:
        typer.echo(f"‚ùå Unexpected error: {e}")

md_template = """
# Title

## Introduction

Write an introduction here.

## Content

- Point 1
- Point 2

## Conclusion

Write a conclusion here.

---

*Generated by Static Site Generator TempO*
"""


@app.command(short_help="Creates a Markdown file with a template")
def create_md_file(name: str, path: str = ""):
    try:
        # Ensure path ends with a trailing slash
        if path and not path.endswith("/"):
            path += "/"

        # Define the full path for the new Markdown file
        full_path = os.path.join(path, name)

        # Ensure the directory exists
        os.makedirs(path, exist_ok=True)

        # Check if the file already exists
        if os.path.exists(full_path):
            typer.echo(f"‚ùå File {full_path} already exists.")
            return

        # Create and write the Markdown file with the template
        with open(full_path, 'w') as file:
            file.write(md_template)

        typer.echo(f"‚úîÔ∏è Markdown file '{name}' created at '{path}' ")

    except Exception as e:
        typer.echo(f"‚ùå Error while creating Markdown file: {e}")
@app.command(short_help="Creates a directory")
def add_direct(directory_name: str, path: str = ""):
    try:
        if path and not path.endswith("/"):
            path += "/"

        full_path = os.path.join(path, directory_name)
        os.makedirs(full_path, exist_ok=True)

        typer.echo(f"‚úîÔ∏è Directory '{directory_name}' created at '{full_path}'")

    except Exception as e:
        typer.echo(f"‚ùå Error while creating directory: {e}")


@app.command(short_help="Show directory structure")
def show_direct(path: str = "."):
    try:
        if not os.path.isdir(path):
            typer.echo(f"‚ùå {path} is not a valid directory")
            return

        # Create a Rich Tree object
        tree = Tree(f"[bold blue]{os.path.basename(path)}[/bold blue]", guide_style="bold blue")

        # Define directories to exclude
        exclude_dirs = {'.venv'}

        # Traverse the directory structure
        for root, dirs, files in os.walk(path):
            # Remove excluded directories from the traversal
            dirs[:] = [d for d in dirs if d not in exclude_dirs]

            # Construct the tree for the current root
            root_tree = tree
            relative_path = os.path.relpath(root, path)
            if relative_path != '.':
                for part in relative_path.split(os.sep):
                    root_tree = root_tree.add(part)

            # Add directories and files to the tree
            for name in dirs:
                root_tree.add(name)
            for name in files:
                root_tree.add(name)

        console.print(tree)
    except Exception as e:
        typer.echo(f"‚ùå Error while showing directory structure: {e}")


@app.command(short_help="Deletes a file")
def delete(name: str, path: str):
    try:
        full_path = os.path.join(path, name)
        if os.path.exists(full_path):
            os.remove(full_path)
            typer.echo(f"‚úîÔ∏è Deleted {full_path}")
        else:
            typer.echo(f"‚ùå {full_path} does not exist")
    except Exception as e:
        typer.echo(f"‚ùå Error while deleting file: {e}")


if __name__ == "__tempo__":
    app()
